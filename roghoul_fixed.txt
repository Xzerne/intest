-- ╔═══════════════════════════════════════════════════════════╗
-- ║           RO-GHOUL AUTOFARM - ORION EDITION               ║
-- ║            Smooth Tween Movement System                   ║
-- ║                  Orion UI Library                         ║
-- ╚═══════════════════════════════════════════════════════════╝

-- Load Orion Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/jensonhirst/Orion/main/source')))()

-- ═══════════════════════════════════════════════════════════
--                      SERVICES
-- ═══════════════════════════════════════════════════════════

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- ═══════════════════════════════════════════════════════════
--                      PLAYER & CHARACTER
-- ═══════════════════════════════════════════════════════════

local player = Players.LocalPlayer
repeat task.wait() until player:FindFirstChild("PlayerFolder")

local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Game data
local team = player.PlayerFolder.Customization.Team.Value
local remotes = ReplicatedStorage.Remotes
local stat = player.PlayerFolder.StatsFunction

-- ═══════════════════════════════════════════════════════════
--                      CONFIGURATION
-- ═══════════════════════════════════════════════════════════

local Config = {
    -- Farm Settings
    Farming = false,
    Training = false,
    SelectedTarget = nil,
    SelectedStage = "One",
    
    -- Movement Settings
    TweenSpeed = 200,
    TweenStyle = Enum.EasingStyle.Sine,
    TweenDirection = Enum.EasingDirection.InOut,
    NpcDistance = -1,
    BossDistance = -3,
    
    -- Combat Settings
    AttackDelay = 0.08,
    SkillDelay = 0.15,
    UseSkillsOnBoss = false,
    
    -- Quest Settings
    AutoQuest = false,
    AutoCashout = false,
    LastCashout = 0,
    CashoutInterval = 7200,
    
    -- Boss Settings
    Bosses = {
        ["Gyakusatsu"] = {enabled = false, level = 1250},
        ["Eto Yoshimura"] = {enabled = false, level = 1250},
        ["Koutarou Amon"] = {enabled = false, level = 750},
        ["Nishiki Nishio"] = {enabled = false, level = 250}
    },
    
    -- Skills
    Skills = {E = false, R = false, C = false, F = false},
    
    -- Stats
    AutoWeaponStat = false,
    AutoDurabilityStat = false,
    
    -- Safety
    AutoHeal = true,
    HealThreshold = 50,
    SafeMode = false,
    AntiAFK = true,
    
    -- System
    RemoteKey = nil,
    CurrentTween = nil
}

-- Stats tracking
local Stats = {
    SessionStart = tick(),
    Kills = 0,
    Deaths = 0,
    YenStart = player.PlayerFolder.Stats.Yen.Value,
    RCStart = player.PlayerFolder.Stats.RC.Value,
    YenGained = 0,
    RCGained = 0
}

-- NPC types
local NpcTypes = {
    ["Aogiri Members"] = "GhoulSpawns",
    ["Investigators"] = "CCGSpawns",
    ["Humans"] = "HumanSpawns"
}

local Stages = {"One", "Two", "Three", "Four", "Five", "Six"}

-- ═══════════════════════════════════════════════════════════
--                      UTILITY FUNCTIONS
-- ═══════════════════════════════════════════════════════════

local function FormatNumber(num)
    if num >= 1000000 then
        return string.format("%.1fM", num / 1000000)
    elseif num >= 1000 then
        return string.format("%.1fK", num / 1000)
    end
    return tostring(math.floor(num))
end

local function FormatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local mins = math.floor((seconds % 3600) / 60)
    local secs = math.floor(seconds % 60)
    return string.format("%02d:%02d:%02d", hours, mins, secs)
end

local function Notify(title, content, time)
    OrionLib:MakeNotification({
        Name = title,
        Content = content,
        Image = "rbxassetid://4483345998",
        Time = time or 3
    })
end

-- ═══════════════════════════════════════════════════════════
--                    SMOOTH TWEEN SYSTEM
-- ═══════════════════════════════════════════════════════════

local TweenSystem = {}
TweenSystem.ActiveTweens = {}

function TweenSystem:CancelAll()
    for _, tween in pairs(self.ActiveTweens) do
        if tween then
            pcall(function() tween:Cancel() end)
        end
    end
    self.ActiveTweens = {}
end

function TweenSystem:MoveTo(targetCFrame, speed)
    if not Config.Farming or not rootPart then return end
    
    self:CancelAll()
    
    local distance = (rootPart.Position - targetCFrame.Position).Magnitude
    local duration = distance / (speed or Config.TweenSpeed)
    
    if duration < 0.1 then
        rootPart.CFrame = targetCFrame
        return
    end
    
    -- Create smooth movement using BodyVelocity
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.Parent = rootPart
    
    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.MaxTorque = Vector3.new(100000, 100000, 100000)
    bodyGyro.P = 10000
    bodyGyro.CFrame = targetCFrame
    bodyGyro.Parent = rootPart
    
    local startPos = rootPart.Position
    local endPos = targetCFrame.Position
    local direction = (endPos - startPos).Unit
    local startTime = tick()
    
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not Config.Farming or not humanoid or humanoid.Health <= 0 then
            connection:Disconnect()
            bodyVelocity:Destroy()
            bodyGyro:Destroy()
            return
        end
        
        local elapsed = tick() - startTime
        local progress = math.min(elapsed / duration, 1)
        
        -- Apply easing
        local alpha = TweenService:GetValue(progress, Config.TweenStyle, Config.TweenDirection)
        local currentPos = startPos:Lerp(endPos, alpha)
        
        -- Smooth movement
        rootPart.CFrame = CFrame.new(currentPos, currentPos + direction)
        bodyVelocity.Velocity = direction * (speed or Config.TweenSpeed)
        bodyGyro.CFrame = targetCFrame
        
        if progress >= 1 then
            connection:Disconnect()
            bodyVelocity:Destroy()
            bodyGyro:Destroy()
            rootPart.CFrame = targetCFrame
        end
    end)
    
    table.insert(self.ActiveTweens, connection)
    task.wait(duration)
end

-- ═══════════════════════════════════════════════════════════
--                    REMOTE KEY SYSTEM
-- ═══════════════════════════════════════════════════════════

local function GetRemoteKey()
    local success = pcall(function()
        -- Try trainer GUI method
        fireclickdetector(workspace.TrainerModel.ClickIndicator.ClickDetector)
        task.wait(0.5)
        
        if player.PlayerGui:FindFirstChild("TrainersGui") then
            player.PlayerGui.TrainersGui:Destroy()
        end
        
        -- Scan garbage collector
        for attempts = 1, 15 do
            for _, v in pairs(getgc(true)) do
                if type(v) == "function" then
                    local info = debug.getinfo(v)
                    if info.source:find("ClientControl") then
                        local constants = debug.getconstants(v)
                        for idx, const in pairs(constants) do
                            if const == "KeyEvent" then
                                local key = debug.getconstant(v, idx + 1)
                                if type(key) == "string" and #key >= 100 then
                                    Config.RemoteKey = key
                                    Notify("Success", "Remote key found!", 3)
                                    return
                                end
                            end
                        end
                    end
                end
            end
            task.wait(0.3)
        end
    end)
    
    if not success or not Config.RemoteKey then
        Notify("Error", "Failed to get remote key!", 5)
    end
end

local function PressKey(key)
    if not Config.RemoteKey or not character:FindFirstChild("Remotes") then return end
    
    local args = {
        Config.RemoteKey,
        key,
        "Down",
        player:GetMouse().Hit,
        nil,
        workspace.Camera.CFrame
    }
    
    character.Remotes.KeyEvent:FireServer(unpack(args))
end

-- ═══════════════════════════════════════════════════════════
--                    COMBAT FUNCTIONS
-- ═══════════════════════════════════════════════════════════

local function EquipWeapon()
    if character:FindFirstChild("Kagune") or character:FindFirstChild("Quinque") then
        return true
    end
    
    PressKey(Config.SelectedStage)
    task.wait(0.5)
    return character:FindFirstChild("Kagune") or character:FindFirstChild("Quinque")
end

local function UseSkills(isBoss)
    if not isBoss or not Config.UseSkillsOnBoss then return end
    
    for key, enabled in pairs(Config.Skills) do
        if enabled and player.PlayerFolder.CanAct.Value then
            local cooldownName = "Special" .. (key == "E" and "1" or key == "R" and "2" or key == "C" and "Bonus" or "3") .. "CD"
            local cooldown = player.PlayerFolder[cooldownName]
            
            if cooldown and cooldown.Value ~= "DownTime" then
                PressKey(key)
                task.wait(Config.SkillDelay)
            end
        end
    end
end

local function GetBestNPC()
    local bestNpc = nil
    local closestDist = math.huge
    local playerLevel = tonumber(player.PlayerFolder.Stats.Level.Value)
    
    -- Priority: Enabled bosses
    for bossName, bossData in pairs(Config.Bosses) do
        if bossData.enabled and playerLevel >= bossData.level then
            for _, spawnFolder in pairs(workspace.NPCSpawns:GetChildren()) do
                local boss = spawnFolder:FindFirstChild(bossName)
                if boss and boss:FindFirstChild("Humanoid") and boss.Humanoid.Health > 0 then
                    return boss
                end
            end
        end
    end
    
    -- Find nearest target NPC
    if Config.SelectedTarget then
        for _, spawnFolder in pairs(workspace.NPCSpawns:GetChildren()) do
            if spawnFolder.Name == Config.SelectedTarget then
                for _, npc in pairs(spawnFolder:GetChildren()) do
                    if npc:IsA("Model") and 
                       npc:FindFirstChild("Humanoid") and 
                       npc:FindFirstChild("HumanoidRootPart") and
                       npc.Humanoid.Health > 0 and
                       not npc:FindFirstChild("AC") then
                        
                        local dist = (npc.HumanoidRootPart.Position - rootPart.Position).Magnitude
                        if dist < closestDist then
                            closestDist = dist
                            bestNpc = npc
                        end
                    end
                end
            end
        end
    end
    
    return bestNpc
end

local function IsBoss(npcName)
    return Config.Bosses[npcName] ~= nil
end

local function CollectCorpse(npc)
    if not npc or not Config.Farming then return end
    
    task.wait(0.3)
    
    local corpseName = npc.Name .. " Corpse"
    local corpse = npc.Parent:FindFirstChild(corpseName)
    
    if not corpse then return end
    
    local clickPart = corpse:FindFirstChild("ClickPart")
    if not clickPart then return end
    
    local detector = clickPart:FindFirstChild("ClickDetector")
    if not detector then return end
    
    -- Move to corpse
    TweenSystem:MoveTo(clickPart.CFrame * CFrame.new(0, 2, 0), Config.TweenSpeed * 1.5)
    
    -- Collect loot
    for i = 1, 5 do
        if not corpse.Parent or not Config.Farming then break end
        
        humanoid:MoveTo(clickPart.Position)
        task.wait(0.1)
        fireclickdetector(detector)
    end
end

-- ═══════════════════════════════════════════════════════════
--                    QUEST SYSTEM
-- ═══════════════════════════════════════════════════════════

-- ═══════════════════════════════════════════════════════════
--                    QUEST SYSTEM (IMPROVED)
-- ═══════════════════════════════════════════════════════════

local QuestSystem = {
    IsActive = false,
    CurrentProgress = 0,
    MaxProgress = 0,
    LastCheck = 0
}

function QuestSystem:Update()
    local questFolder = player.PlayerFolder.CurrentQuest.Complete
    local questTarget = questFolder:FindFirstChild("Aogiri Member")
    
    if questTarget then
        self.IsActive = true
        self.CurrentProgress = tonumber(questTarget.Value) or 0
        self.MaxProgress = tonumber(questTarget.Max.Value) or 0
    else
        self.IsActive = false
        self.CurrentProgress = 0
        self.MaxProgress = 0
    end
end

function QuestSystem:IsComplete()
    self:Update()
    return self.IsActive and self.CurrentProgress >= self.MaxProgress
end

function QuestSystem:NeedsNewQuest()
    self:Update()
    return not self.IsActive or self:IsComplete()
end

function QuestSystem:GetProgressString()
    self:Update()
    if self.IsActive then
        return string.format("%d/%d", self.CurrentProgress, self.MaxProgress)
    end
    return "No Quest"
end

local function GetQuest()
    -- Check cooldown to prevent spam
    if tick() - QuestSystem.LastCheck < 5 then
        return
    end
    QuestSystem.LastCheck = tick()
    
    -- Check if quest is already active
    if not QuestSystem:NeedsNewQuest() then
        local progress = QuestSystem:GetProgressString()
        Notify("Quest", "Quest in progress: " .. progress, 2)
        return
    end
    
    local questNpc = team == "Ghoul" and 
                     workspace.Anteiku.Yoshimura or 
                     workspace.CCGBuilding.Yoshitoki
    
    if not questNpc or not questNpc:FindFirstChild("HumanoidRootPart") then 
        Notify("Error", "Quest NPC not found!", 3)
        return 
    end
    
    TweenSystem:MoveTo(questNpc.HumanoidRootPart.CFrame * CFrame.new(0, 0, 5))
    task.wait(0.5)
    
    -- Invoke ally info
    pcall(function()
        remotes.Ally.AllyInfo:InvokeServer()
    end)
    task.wait(0.3)
    
    -- Click task indicator
    if questNpc:FindFirstChild("TaskIndicator") then
        fireclickdetector(questNpc.TaskIndicator.ClickDetector)
        task.wait(0.3)
    end
    
    -- Request task (call twice to ensure)
    pcall(function()
        remotes[questNpc.Name].Task:InvokeServer()
        task.wait(0.2)
        remotes[questNpc.Name].Task:InvokeServer()
    end)
    
    -- Wait and verify
    task.wait(1)
    QuestSystem:Update()
    
    if QuestSystem.IsActive then
        Notify("Quest", "Quest accepted! " .. QuestSystem:GetProgressString(), 3)
    else
        Notify("Error", "Failed to accept quest!", 3)
    end
end

local function CashoutReputation()
    local questNpc = team == "Ghoul" and 
                     workspace.Anteiku.Yoshimura or 
                     workspace.CCGBuilding.Yoshitoki
    
    if not questNpc or not questNpc:FindFirstChild("HumanoidRootPart") then return end
    
    TweenSystem:MoveTo(questNpc.HumanoidRootPart.CFrame * CFrame.new(0, 0, 5))
    task.wait(0.5)
    
    remotes.ReputationCashOut:InvokeServer()
    Config.LastCashout = tick()
    Notify("Reputation", "Reputation cashed out!", 2)
end

-- ═══════════════════════════════════════════════════════════
--                    AUTO HEAL SYSTEM
-- ═══════════════════════════════════════════════════════════

local function AutoHeal()
    if not Config.AutoHeal or not humanoid then return end
    
    local healthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
    
    if healthPercent < Config.HealThreshold then
        for _, item in pairs(player.Backpack:GetChildren()) do
            if item:IsA("Tool") then
                local name = item.Name:lower()
                if name:find("food") or name:find("coffee") or name:find("drink") then
                    humanoid:EquipTool(item)
                    task.wait(0.3)
                    PressKey("Mouse1")
                    task.wait(0.5)
                    return
                end
            end
        end
    end
end

-- ═══════════════════════════════════════════════════════════
--                    MAIN FARM LOOP
-- ═══════════════════════════════════════════════════════════

local function FarmLoop()
    while Config.Farming do
        local success, error = pcall(function()
            -- Update references
            character = player.Character
            if not character then task.wait(2) return end
            
            humanoid = character:FindFirstChild("Humanoid")
            rootPart = character:FindFirstChild("HumanoidRootPart")
            
            if not humanoid or not rootPart or humanoid.Health <= 0 then
                task.wait(2)
                return
            end
            
            -- Auto heal
            AutoHeal()
            
            -- Quest management
            if Config.AutoQuest then
                -- Only check quest every few seconds to avoid spam
                if tick() - QuestSystem.LastCheck > 3 then
                    if QuestSystem:NeedsNewQuest() then
                        GetQuest()
                        task.wait(2)
                        return
                    end
                end
            end
            
            -- Auto cashout
            if Config.AutoCashout and (tick() - Config.LastCashout) > Config.CashoutInterval then
                CashoutReputation()
                task.wait(1)
                return
            end
            
            -- Get target
            local targetNpc = GetBestNPC()
            if not targetNpc then
                task.wait(1)
                return
            end
            
            local targetRoot = targetNpc:FindFirstChild("HumanoidRootPart")
            if not targetRoot then
                task.wait(0.5)
                return
            end
            
            -- Calculate position
            local isBossTarget = IsBoss(targetNpc.Name)
            local distance = isBossTarget and Config.BossDistance or Config.NpcDistance
            
            local targetPos
            if isBossTarget then
                targetPos = targetRoot.CFrame * CFrame.Angles(math.rad(90), 0, 0) * 
                           CFrame.new(0, distance, 0)
            else
                targetPos = targetRoot.CFrame + (targetRoot.CFrame.LookVector * distance)
            end
            
            -- Move to target
            TweenSystem:MoveTo(targetPos)
            
            -- Combat loop
            while targetNpc and 
                  targetNpc:FindFirstChild("Humanoid") and 
                  targetNpc.Humanoid.Health > 0 and 
                  Config.Farming and
                  humanoid.Health > 0 do
                
                -- Equip weapon
                if not EquipWeapon() then
                    task.wait(0.5)
                    break
                end
                
                -- Update position
                if isBossTarget then
                    rootPart.CFrame = targetRoot.CFrame * CFrame.Angles(math.rad(90), 0, 0) * 
                                     CFrame.new(0, distance, 0)
                    UseSkills(true)
                else
                    rootPart.CFrame = targetRoot.CFrame + (targetRoot.CFrame.LookVector * distance)
                end
                
                -- Attack
                if player.PlayerFolder.CanAct.Value then
                    PressKey("Mouse1")
                end
                
                task.wait(Config.SafeMode and 0.15 or Config.AttackDelay)
            end
            
            -- Collect loot
            if targetNpc and humanoid.Health > 0 and not isBossTarget then
                Stats.Kills = Stats.Kills + 1
                CollectCorpse(targetNpc)
            end
            
        end)
        
        if not success then
            warn("Farm error:", error)
            task.wait(1)
        end
        
        task.wait()
    end
end

-- ═══════════════════════════════════════════════════════════
--                    STAT TRACKING
-- ═══════════════════════════════════════════════════════════

player.PlayerFolder.Stats.Yen.Changed:Connect(function(newValue)
    if Config.Farming then
        Stats.YenGained = newValue - Stats.YenStart
    end
end)

player.PlayerFolder.Stats.RC.Changed:Connect(function(newValue)
    if Config.Farming then
        Stats.RCGained = newValue - Stats.RCStart
    end
end)

humanoid.Died:Connect(function()
    Stats.Deaths = Stats.Deaths + 1
    task.wait(5)
    character = player.Character or player.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
end)

-- ═══════════════════════════════════════════════════════════
--                    AUTO STAT ALLOCATION
-- ═══════════════════════════════════════════════════════════

task.spawn(function()
    while task.wait(1) do
        if tonumber(player.PlayerFolder.Stats.Focus.Value) > 0 then
            if Config.AutoWeaponStat then
                stat:InvokeServer("Focus", "WeaponAddButton", 1)
            end
            if Config.AutoDurabilityStat then
                stat:InvokeServer("Focus", "DurabilityAddButton", 1)
            end
        end
    end
end)

-- ═══════════════════════════════════════════════════════════
--                    ORION UI CREATION
-- ═══════════════════════════════════════════════════════════

local Window = OrionLib:MakeWindow({
    Name = "RO-GHOUL | Smooth Tween Edition",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "RoGhoulOrion",
    IntroEnabled = true,
    IntroText = "Ro-Ghoul Autofarm",
    IntroIcon = "rbxassetid://4483345998"
})

-- ═══════════════════════════════════════════════════════════
--                    MAIN TAB
-- ═══════════════════════════════════════════════════════════

local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

MainTab:AddParagraph("Welcome!", "Smooth tween movement system activated!")

MainTab:AddDropdown({
    Name = "Select Target",
    Default = "Aogiri Members",
    Options = {"Aogiri Members", "Investigators", "Humans"},
    Callback = function(Value)
        Config.SelectedTarget = NpcTypes[Value]
        Notify("Target", "Selected: " .. Value, 2)
    end    
})

MainTab:AddDropdown({
    Name = "Select Stage",
    Default = "1",
    Options = {"1", "2", "3", "4", "5", "6"},
    Callback = function(Value)
        Config.SelectedStage = Stages[tonumber(Value)]
        Notify("Stage", "Stage " .. Value .. " selected", 2)
    end    
})

MainTab:AddToggle({
    Name = "Start Farming",
    Default = false,
    Callback = function(Value)
        Config.Farming = Value
        
        if Value then
            if not Config.RemoteKey then
                GetRemoteKey()
                task.wait(1)
            end
            
            if Config.RemoteKey then
                Stats.SessionStart = tick()
                Stats.Kills = 0
                Stats.Deaths = 0
                Stats.YenStart = player.PlayerFolder.Stats.Yen.Value
                Stats.RCStart = player.PlayerFolder.Stats.RC.Value
                Notify("Farm", "Farming started!", 3)
                task.spawn(FarmLoop)
            else
                Config.Farming = false
                Notify("Error", "Remote key not found!", 5)
            end
        else
            TweenSystem:CancelAll()
            Notify("Farm", "Farming stopped!", 2)
        end
    end    
})

MainTab:AddLabel("Session Stats")

local StatsLabel = MainTab:AddLabel("Time: 00:00:00 | Kills: 0")
local QuestProgressLabel = MainTab:AddLabel("Quest: No active quest")

task.spawn(function()
    while task.wait(1) do
        if Config.Farming then
            local elapsed = tick() - Stats.SessionStart
            StatsLabel:Set(string.format(
                "Time: %s | Kills: %d | Deaths: %d\nYen: +%s | RC: +%s",
                FormatTime(elapsed),
                Stats.Kills,
                Stats.Deaths,
                FormatNumber(Stats.YenGained),
                FormatNumber(Stats.RCGained)
            ))
            
            -- Update quest progress
            if Config.AutoQuest then
                QuestSystem:Update()
                local progressStr = QuestSystem:GetProgressString()
                QuestProgressLabel:Set("Quest: " .. progressStr)
            else
                QuestProgressLabel:Set("Quest: Auto Quest disabled")
            end
        end
    end
end)

-- ═══════════════════════════════════════════════════════════
--                    SETTINGS TAB
-- ═══════════════════════════════════════════════════════════

local SettingsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

SettingsTab:AddSection({Name = "Movement Settings"})

SettingsTab:AddSlider({
    Name = "Tween Speed",
    Min = 100,
    Max = 300,
    Default = 200,
    Color = Color3.fromRGB(255, 0, 0),
    Increment = 10,
    ValueName = "speed",
    Callback = function(Value)
        Config.TweenSpeed = Value
    end    
})

SettingsTab:AddSlider({
    Name = "NPC Distance",
    Min = 3,
    Max = 15,
    Default = 1,
    Color = Color3.fromRGB(255, 0, 0),
    Increment = 1,
    ValueName = "studs",
    Callback = function(Value)
        Config.NpcDistance = Value
    end    
})

SettingsTab:AddSlider({
    Name = "Boss Distance",
    Min = 5,
    Max = 25,
    Default = 1,
    Color = Color3.fromRGB(255, 0, 0),
    Increment = 1,
    ValueName = "studs",
    Callback = function(Value)
        Config.BossDistance = Value
    end    
})

SettingsTab:AddDropdown({
    Name = "Tween Style",
    Default = "Sine",
    Options = {"Linear", "Sine", "Quad", "Cubic", "Quart", "Quint"},
    Callback = function(Value)
        Config.TweenStyle = Enum.EasingStyle[Value]
    end    
})

SettingsTab:AddSection({Name = "Combat Settings"})

SettingsTab:AddSlider({
    Name = "Attack Delay (ms)",
    Min = 50,
    Max = 200,
    Default = 80,
    Color = Color3.fromRGB(255, 0, 0),
    Increment = 10,
    ValueName = "ms",
    Callback = function(Value)
        Config.AttackDelay = Value / 1000
    end    
})

SettingsTab:AddToggle({
    Name = "Safe Mode",
    Default = false,
    Callback = function(Value)
        Config.SafeMode = Value
    end    
})

-- ═══════════════════════════════════════════════════════════
--                    BOSS TAB
-- ═══════════════════════════════════════════════════════════

local BossTab = Window:MakeTab({
    Name = "Boss Farm",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

BossTab:AddSection({Name = "Boss Selection"})

for bossName, bossData in pairs(Config.Bosses) do
    BossTab:AddToggle({
        Name = bossName .. " (Lvl " .. bossData.level .. "+)",
        Default = false,
        Callback = function(Value)
            Config.Bosses[bossName].enabled = Value
        end    
    })
end

BossTab:AddSection({Name = "Auto Skills (Bosses Only)"})

BossTab:AddToggle({
    Name = "Use Skills on Bosses",
    Default = false,
    Callback = function(Value)
        Config.UseSkillsOnBoss = Value
    end    
})

for key, _ in pairs(Config.Skills) do
    BossTab:AddToggle({
        Name = "Auto Use " .. key,
        Default = false,
        Callback = function(Value)
            Config.Skills[key] = Value
        end    
    })
end

-- ═══════════════════════════════════════════════════════════
--                    QUEST TAB
-- ═══════════════════════════════════════════════════════════

local QuestTab = Window:MakeTab({
    Name = "Quest",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

QuestTab:AddSection({Name = "Quest Settings"})

QuestTab:AddParagraph("Quest Info", "Auto quest will automatically accept and turn in quests")

local QuestStatusLabel = QuestTab:AddLabel("Status: Checking...")

task.spawn(function()
    while task.wait(2) do
        QuestSystem:Update()
        if QuestSystem.IsActive then
            local percent = math.floor((QuestSystem.CurrentProgress / QuestSystem.MaxProgress) * 100)
            QuestStatusLabel:Set(string.format(
                "Status: Active\nProgress: %d/%d (%d%%)\nTarget: Aogiri Members",
                QuestSystem.CurrentProgress,
                QuestSystem.MaxProgress,
                percent
            ))
        else
            QuestStatusLabel:Set("Status: No active quest")
        end
    end
end)

QuestTab:AddToggle({
    Name = "Auto Quest",
    Default = false,
    Callback = function(Value)
        Config.AutoQuest = Value
        if Value then
            Notify("Auto Quest", "Auto Quest enabled!", 2)
        end
    end    
})

QuestTab:AddToggle({
    Name = "Auto Cashout (2 hours)",
    Default = false,
    Callback = function(Value)
        Config.AutoCashout = Value
    end    
})

QuestTab:AddButton({
    Name = "Check Quest Status",
    Callback = function()
        QuestSystem:Update()
        if QuestSystem.IsActive then
            Notify("Quest Status", 
                string.format("Progress: %d/%d\nStatus: %s",
                    QuestSystem.CurrentProgress,
                    QuestSystem.MaxProgress,
                    QuestSystem:IsComplete() and "Complete" or "In Progress"
                ), 4)
        else
            Notify("Quest Status", "No active quest!", 3)
        end
    end    
})

QuestTab:AddButton({
    Name = "Get Quest Now",
    Callback = function()
        QuestSystem.LastCheck = 0 -- Reset cooldown
        task.spawn(GetQuest)
    end    
})

QuestTab:AddButton({
    Name = "Cashout Reputation Now",
    Callback = function()
        task.spawn(CashoutReputation)
    end    
})

-- ═══════════════════════════════════════════════════════════
--                    MISC TAB
-- ═══════════════════════════════════════════════════════════

local MiscTab = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

MiscTab:AddSection({Name = "Auto Stats"})

MiscTab:AddToggle({
    Name = "Auto Weapon Stats",
    Default = false,
    Callback = function(Value)
        Config.AutoWeaponStat = Value
    end    
})

MiscTab:AddToggle({
    Name = "Auto Durability Stats",
    Default = false,
    Callback = function(Value)
        Config.AutoDurabilityStat = Value
    end    
})

MiscTab:AddSection({Name = "Safety Features"})

MiscTab:AddToggle({
    Name = "Auto Heal",
    Default = true,
    Callback = function(Value)
        Config.AutoHeal = Value
    end    
})

MiscTab:AddSlider({
    Name = "Heal Threshold (%)",
    Min = 30,
    Max = 80,
    Default = 50,
    Color = Color3.fromRGB(0, 255, 0),
    Increment = 5,
    ValueName = "HP%",
    Callback = function(Value)
        Config.HealThreshold = Value
    end    
})

MiscTab:AddToggle({
    Name = "Anti-AFK",
    Default = true,
    Callback = function(Value)
        Config.AntiAFK = Value
        if Value then
            pcall(function()
                for _, connection in pairs(getconnections(player.Idled)) do
                    connection:Disable()
                end
            end)
        end
    end    
})

MiscTab:AddSection({Name = "Utilities"})

MiscTab:AddButton({
    Name = "Rejoin Server",
    Callback = function()
        game:GetService("TeleportService"):TeleportToPlaceInstance(
            game.PlaceId,
            game.JobId,
            player
        )
    end    
})

MiscTab:AddButton({
    Name = "Server Hop",
    Callback = function()
        local servers = {}
        local req = syn and syn.request or http and http.request or http_request or request
        
        local res = req({
            Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Asc&limit=100", game.PlaceId)
        })
        
        local data = game:GetService("HttpService"):JSONDecode(res.Body)
        
        if data and data.data then
            for _, server in pairs(data.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
            
            if #servers > 0 then
                game:GetService("TeleportService"):TeleportToPlaceInstance(
                    game.PlaceId,
                    servers[math.random(1, #servers)],
                    player
                )
            end
        end
    end    
})

-- ═══════════════════════════════════════════════════════════
--                    INFO TAB
-- ═══════════════════════════════════════════════════════════

local InfoTab = Window:MakeTab({
    Name = "Info",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

InfoTab:AddSection({Name = "Script Information"})

InfoTab:AddParagraph("Version", "Ro-Ghoul v2.0 - Orion Edition")
InfoTab:AddParagraph("UI Library", "Orion Library by Shlexware")
InfoTab:AddParagraph("Movement", "Smooth Tween System")

InfoTab:AddSection({Name = "Features"})

InfoTab:AddParagraph("✓ Fixed Features", 
    "• Smooth tween movement\n" ..
    "• Modern Orion UI\n" ..
    "• Auto quest system\n" ..
    "• Boss farming\n" ..
    "• Auto heal\n" ..
    "• Auto stats\n" ..
    "• Anti-AFK"
)

InfoTab:AddSection({Name = "Player Information"})

local PlayerInfoLabel = InfoTab:AddLabel("Loading...")

task.spawn(function()
    while task.wait(2) do
        local level = player.PlayerFolder.Stats.Level.Value
        local yen = FormatNumber(player.PlayerFolder.Stats.Yen.Value)
        local rc = FormatNumber(player.PlayerFolder.Stats.RC.Value)
        
        PlayerInfoLabel:Set(string.format(
            "Level: %s\nYen: %s\nRC: %s\nTeam: %s",
            level,
            yen,
            rc,
            team
        ))
    end
end)

InfoTab:AddSection({Name = "Credits"})

InfoTab:AddParagraph("Developer", "Script by Xzerne\nImproved & Fixed")
InfoTab:AddParagraph("Support", "Report bugs or request features!")

-- ═══════════════════════════════════════════════════════════
--                    TRAINING TAB
-- ═══════════════════════════════════════════════════════════

local TrainingTab = Window:MakeTab({
    Name = "Training",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

TrainingTab:AddSection({Name = "Auto Trainer"})

local CurrentTrainerLabel = TrainingTab:AddLabel("Current Trainer: Loading...")
local ProgressLabel = TrainingTab:AddLabel("Progress: 0%")

-- Update trainer info
task.spawn(function()
    while task.wait(1) do
        local trainerName = player.PlayerFolder.Trainers[team.."Trainer"].Value
        local progress = player.PlayerFolder.Trainers[trainerName].Progress.Value
        
        CurrentTrainerLabel:Set("Current Trainer: " .. trainerName)
        ProgressLabel:Set("Progress: " .. math.floor(progress) .. "%")
    end
end)

TrainingTab:AddToggle({
    Name = "Auto Training",
    Default = false,
    Callback = function(Value)
        Config.Training = Value
        
        if Value then
            task.spawn(function()
                while Config.Training do
                    local success, error = pcall(function()
                        local tkey
                        
                        local connection = player.Backpack.DescendantAdded:Connect(function(obj)
                            if tostring(obj) == "TSCodeVal" and obj:IsA("StringValue") then
                                tkey = obj.Value
                            end
                        end)
                        
                        local result = remotes.Trainers.RequestTraining:InvokeServer()
                        
                        if result == "TRAINING" then
                            for _, session in pairs(workspace.TrainingSessions:GetChildren()) do
                                if session:FindFirstChild("Player") and session.Player.Value == player then
                                    session.Comm:FireServer("Finished", tkey, false)
                                    break
                                end
                            end
                        elseif result == "TRAINING COMPLETE" then
                            Notify("Training", "Training complete! Switching...", 2)
                            
                            -- Auto switch to incomplete trainer
                            for _, trainer in pairs(player.PlayerFolder.Trainers:GetDescendants()) do
                                if trainer:FindFirstChild("Progress") then
                                    if tonumber(trainer.Progress.Value) < 100 then
                                        remotes.Trainers.ChangeTrainer:InvokeServer(trainer.Name)
                                        task.wait(2)
                                        break
                                    end
                                end
                            end
                        end
                        
                        if connection then
                            connection:Disconnect()
                        end
                    end)
                    
                    if not success then
                        warn("Training error:", error)
                    end
                    
                    task.wait(1)
                end
            end)
        end
    end    
})

TrainingTab:AddButton({
    Name = "Request Training Now",
    Callback = function()
        remotes.Trainers.RequestTraining:InvokeServer()
        Notify("Training", "Training requested!", 2)
    end    
})

-- ═══════════════════════════════════════════════════════════
--                    CHARACTER RESPAWN HANDLER
-- ═══════════════════════════════════════════════════════════

player.CharacterAdded:Connect(function(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
    rootPart = char:WaitForChild("HumanoidRootPart")
    
    humanoid.Died:Connect(function()
        Stats.Deaths = Stats.Deaths + 1
    end)
end)

-- ═══════════════════════════════════════════════════════════
--                    INITIALIZATION
-- ═══════════════════════════════════════════════════════════

-- Get remote key on startup
task.spawn(function()
    task.wait(2)
    GetRemoteKey()
end)

-- Enable anti-AFK by default
if Config.AntiAFK then
    pcall(function()
        for _, connection in pairs(getconnections(player.Idled)) do
            connection:Disable()
        end
    end)
end

-- Initialize Orion
OrionLib:Init()

-- Success notification
Notify("Loaded", "Ro-Ghoul script loaded successfully!", 5)

print("╔═══════════════════════════════════════════════════════════╗")
print("║         RO-GHOUL AUTOFARM - ORION EDITION LOADED          ║")
print("╠═══════════════════════════════════════════════════════════╣")
print("║  • Smooth Tween Movement System ✓                         ║")
print("║  • Orion UI Library ✓                                     ║")
print("║  • All Features Working ✓                                 ║")
print("║  • Auto Quest System ✓                                    ║")
print("║  • Boss Farming ✓                                         ║")
print("║  • Auto Training ✓                                        ║")
print("║  • Auto Heal ✓                                            ║")
print("║  • Anti-AFK ✓                                             ║")
print("╚═══════════════════════════════════════════════════════════╝")
print("")
print("💡 Tips:")
print("  1. Select your target NPC type")
print("  2. Choose your Kagune/Quinque stage")
print("  3. Toggle 'Start Farming'")
print("  4. Configure settings for optimal performance")
print("")
print("🎯 Movement System:")
print("  • Uses smooth BodyVelocity tweening")
print("  • Natural-looking movement")
print("  • Adjustable speed & easing style")
print("  • No teleport detection")
print("")
print("⚙️ Recommended Settings:")
print("  • Tween Speed: 200")
print("  • NPC Distance: 7")
print("  • Boss Distance: 15")
print("  • Tween Style: Sine")
print("")